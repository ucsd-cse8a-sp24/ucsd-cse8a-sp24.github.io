# DO NOT EDIT THIS FILE

import numpy as np
from PIL import Image

def load_img(filename):
    """
    Description: Loads an image from disk
    Parameter: a string containing the filename or the filepath of the image
    Returns: the 2D list representation of the image
    """

    pil_img = Image.open(filename)
    arr = np.array(pil_img.getdata(), dtype=np.uint8).reshape(pil_img.height, pil_img.width, 3)
    img = [ [ (int(p[0]),int(p[1]),int(p[2])) for p in row ] for row in arr ]
    return img

def save_img(img, filename):
    """
    Description: Stores an image to disk
    Parameters: 2D list representation of an image and a string containing
                the filepath or filename where the image should be stored.
    Returns: None
    """
    
    arr = np.asarray(img, dtype=np.uint8)
    #pixel values stored as unsigned 8-bit integers
    pil_img = Image.fromarray(arr)
    pil_img.save(filename, format='png')

def create_img(height, width, color):
    """
    Description: Creates an image with dimensions 'height x width'
                 and sets all tuples to 'color'.
    Parameters: 2 integers(height and the width of the image to be created)
                and a tuple that contains the RBG values of the color
    Returns: creates a 2D list representation of the image and returns the
             2D list representation of the image
    """

    result = [None] * height
    for i in range(len(result)):
        result[i] = [color] * width
    return result

def height(img):
    """
    Description: Computes and returns the height of the image
    Parameter: 2D list representation of an image
    Returns: the height of the image (which is equivalent to the number of rows
             in a 2D list)
    """
    
    return len(img)

def width(img):
    """
    Description: Computes and returns the width of the image
    Parameter: 2D list representation of an image
    Returns: the width of the image (which is equivalent to the number of
             columns in a 2D list)
    """
    
    return len(img[0])

def img_str_to_file(img, filename):
    """
    Description: Stores the string representation of the image to a file.
                 Stores the pixel values for a maximum of 20 rows and columns
                 in the given filepath and filename.
    Parameters: 2D list representation of an image and a string containing the
                filepath or filename where the pixel values of the image should
                be stored
    Returns: the formatted string representation of the pixel values of the
             image (max 20 rows and columns).
    """
    
    # Converting to integer pixel values
    img = np.asarray(img, dtype=np.uint8)

    # Calculating max length 
    max_length = len(str((255,255,255)))

    # Limiting the number of rows and columns to be printed
    r_limit = min(20, height(img))
    c_limit = min(20, width(img))
    
    with open(filename, 'w') as file:
        pix_str = ""
        for y in range(r_limit):
            for x in range(c_limit):
                # Creating the string representation
                temp_str = ("(" + str(img[y][x][0])
                           + "," + str(img[y][x][1])
                           + "," + str(img[y][x][2]) + ")")
                pix_str += temp_str
                # Added appropriate number of spaces to make it visually clear
                pix_str += " " * (max_length-len(temp_str))
            pix_str += "\n"
        file.write(pix_str)

    return pix_str
            
    
    
